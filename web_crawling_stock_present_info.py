# -*- coding: utf-8 -*-
"""WEB_CRAWLING_STOCK_PRESENT_INFO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KP8t3HcHQlcJmkNSFsXjIBSm409SFc04
"""

import urllib.request
from bs4 import BeautifulSoup as bs
import pandas as pd

def one_page_list():
  STOCKLIST_FAVORITE_URL = "https://finance.naver.com/sise/lastsearch2.nhn"

  response = urllib.request.urlopen(STOCKLIST_FAVORITE_URL)
  STOCKLIST_FAVORITE_HTML = response.read()
  soup = bs(STOCKLIST_FAVORITE_HTML)
  STOCK_PRICE_LIST=[]
  STOCK_NAME_LIST=[]
  STOCK_STARTPRICE=[]
  STOCK_HIGHEST=[]
  STOCK_LOWEST=[]
  STOCK_PER=[]
  STOCK_ROE=[]

  for tr in soup.findAll('tr'):
    stockName = tr.findAll('a', attrs={'class','tltle'})
    if stockName is None or stockName == []:
      pass
    else:
      STOCK_NAME_LIST.append(stockName)
    stockPrice = tr.findAll('td', attrs={'class','number'})
    if stockPrice is None or stockPrice ==[]:
      pass
    else:
      stockPrice=stockPrice[1].contents[-1]
      stockPrice = stockPrice.replace(",","")
      STOCK_PRICE_LIST.append(stockPrice)
    stockStartPrice = tr.findAll('td', attrs={'class','number'})
    if stockStartPrice is None or stockStartPrice ==[]:
      pass
    else:
      stockStartPrice=stockStartPrice[5].contents[-1]
      stockStartPrice = stockStartPrice.replace(",","")
      STOCK_STARTPRICE.append(stockStartPrice)
    stockHigh = tr.findAll('td', attrs={'class','number'})
    if stockHigh is None or stockHigh ==[]:
      pass
    else:
      stockHigh=stockHigh[6].contents[-1]
      stockHigh = stockHigh.replace(",","")
      STOCK_HIGHEST.append(stockHigh)
    stockLow = tr.findAll('td', attrs={'class','number'})
    if stockLow is None or stockLow ==[]:
      pass
    else:
      stockLow=stockLow[7].contents[-1]
      stockLow = stockLow.replace(",","")
      STOCK_LOWEST.append(stockLow)
    stockPER = tr.findAll('td', attrs={'class','number'})
    if stockPER is None or stockPER ==[]:
      pass
    else:
      stockPER=stockPER[8].contents[-1]
      STOCK_PER.append(stockPER)
    stockROE = tr.findAll('td', attrs={'class','number'})
    if stockROE is None or stockROE ==[]:
      pass
    else:
      stockROE=stockROE[9].contents[-1]
      stockROE = stockROE.replace(",","")
      STOCK_ROE.append(stockROE)
  STOCK_LIST = []
  for i in range(len(STOCK_NAME_LIST)):
    stockInfo = [STOCK_NAME_LIST[i],int(STOCK_PRICE_LIST[i]),int(STOCK_STARTPRICE[i]), int(STOCK_HIGHEST[i]), int(STOCK_LOWEST[i]), STOCK_PER[i], STOCK_ROE[i]]
    STOCK_LIST.append(stockInfo)
  return pd.DataFrame(STOCK_LIST, columns=("종목명","현재가","시가","고가","저가","PER","ROE"))

one_page_list()